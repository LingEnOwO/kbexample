version: '3'

  # Load env/development.env by default, but allow it to be overridden by setting ENV like `ENV=production task <task>`
env:
  ENV: "{{.ENV | default \"development\"}}"
dotenv: ['env/{{.ENV}}.env']

tasks:

  # Developer setup, development, and testing
  #
  setup:
    desc: Install dependencies
    cmds:
      - npm install
      # Do an initial build of the frontend assets to ensure that when we build the Go app, embed succeeds
      - npx vite build
      - go install
      - if [[ ! $(command -v air) ]]; then go install github.com/air-verse/air@v1.52.2; fi
      - if [[ ! $(command -v atlas) ]]; then curl -sSf https://atlasgo.sh | sh -s -- -y; fi
      - task: "db:up"
      - task: "db:apply"
      - task: "db:seed"
      - echo "Setup complete. Run 'task dev' to start the dev server."

  dev:
    desc: Run a local dev server, watching for changes
    deps: ["dev:frontend", "dev:backend"]

  dev:backend:
    cmds:
      # Sometimes the previous process doesn't get killed properly, ensure it's gone
      - pkill kb_example || true
      - air {{.CLI_ARGS}}

  dev:frontend:
    cmds:
      - npx vite --clearScreen false

  dev:dlv:
    desc: Run the backend with dlv for debugging
    cmds:
      - npx vite build
      - dlv debug .

  test:
    desc: "Run tests (hint: use -w to test continuously)"
    sources:
      - "**/*.go"
    cmds:
      # NOTE(dk): -p 1 ensures we don't run the package tests concurrently. They can interfere with each other because
      # they share a test database. To be fixed by https://github.com/katabole/kbsql/issues/2
      - go test -p 1 ./...

  # Database tasks
  # Note that most of the configuration of these comes from environment variables, loaded with dotenv above
  #
  db:up:
    desc: Ensure a local postgres dev db is running
    cmds:
      - docker compose up -d postgres
      - sleep 1 # Give it a second to bind to ports so the next commands don't fail
      # Ensure these dev-related databases exist and create them if they don't yet.
      # The former is the app's dev database, while the latter is essentially a "scratch" database used by atlas
      # (see https://atlasgo.io/concepts/dev-database#introduction)
      - psql -tc "SELECT 1 FROM pg_database WHERE datname = 'kb_example_dev'" | grep -q 1 || psql -c "CREATE DATABASE kb_example_dev"
      - psql -tc "SELECT 1 FROM pg_database WHERE datname = 'atlas_dev'" | grep -q 1 || psql -c "CREATE DATABASE atlas_dev"

  db:down:
    desc: Take down the local postgres db
    cmds:
      - docker compose down postgres

  db:apply:
    desc: Ensure any changes in the schema.sql file are applied to the dev database
    cmds:
      - atlas schema apply --auto-approve --to file://schema.sql --url "postgresql:///kbexample_dev" --dev-url "postgresql:///atlas_dev"

  db:gen-migration:
    desc: Create a migration file based on the changes made to schema.sql
    cmds:
      - atlas migrate diff {{.CLI_ARGS}} --dir "file://migrations" --to file://schema.sql --dev-url "postgresql:///atlas_dev"

  db:shell:
    desc: Open a psql shell to the database
    cmds:
      - psql

  db:seed:
    desc: Insert seed data into the database
    cmds:
      - go run ./cmd/dbseed

# vim: set expandtab tabstop=2
